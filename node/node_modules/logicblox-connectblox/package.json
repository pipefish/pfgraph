{
  "name": "logicblox-connectblox",
  "version": "0.2.1",
  "main": "./lbc.js",
  "devDependencies": {
    "co": "~2.3.0",
    "co-fs": "1.1.x",
    "co-exec": "1.1.x",
    "co-express": "~0.3.3",
    "express": "~3.4.6",
    "node-uuid": "1.4.0"
  },
  "dependencies": {
    "lodash": "~2.4.0",
    "protobufjs": "2.0.x"
  },
  "scripts": {
    "test": "node --harmony test/apitest.js"
  },
  "readme": "node-lbc\n========\n\nA node.js client library for LogicBlox. Allows you to connect to LogicBlox using pure JavaScript running in node.js.\n\nIt is the product of the LogicBlox Hackathon '13 and written by [Zef Hemel](mailto:zef.hemel@logicblox.com). A 5 minute screencast explaining it\n[can be seen here](http://screencast.com/t/zZ7uBddiRQg).\n\nWhy a node.js connector?\n------------------------\n\nWe now position LogicBlox as a database. Typically, a database is not enough to build complete applications. You typically have an application server of some kind that talks to the database and executes queries. On the Java platform you have JDBC for SQL databases. I already built a Clojure connector for LogicBlox before, so this time I thought I'd try building one for [node.js](http://nodejs.org).\n\nThe cool thing about node.js is\n\n1. It's JavaScript -- awesome\n2. It's asynchronous\n3. It's a great platform for building efficient servers that primarily glue systems together\n\nHow to use it\n=============\n\nThe project contains a Vagrantfile:\n\n    $ vagrant up\n\nOnce done (this will take a while), login:\n\n    $ vagrant ssh\n\nand then run `npm install` to intall dependencies:\n\n    $ npm install\n\n\nTo run the tests (in `tests`):\n\n    $ npm test\n\nConnect\n-------\n\nImport the module:\n\n    var lbConnect = require(\"lbc\");\n\nConnect to LB:\n\n    lbConnect(function(err, conn) {\n        // Your code here\n        // Close connection\n        conn.close();\n    });\n\nDisconnect:\n\n    conn.close(function(err) {\n       ...\n    });\n\nSchema management\n-----------------\n\nAdd a block:\n\n    conn.addBlock(\"myworkspace\", \"person(x) -> string(x).\", function(err) {\n       ...\n    });\n\nQueries\n-------\n\nExecute a block:\n\n    conn.exec(\"myworkspace\", \"+person(\\\"Zef\\\").\", function(err) {\n       ...\n    });\n\nQuery a predicate:\n\n    conn.query(\"myworkspace\", \"person\", function(err, results) {\n       console.log(results);\n    });\n\nExecute a query:\n\n    conn.query(\"myworkspace\", \"_(p) <- person(p).\", function(err, results) {\n       console.log(results);\n    });\n\nWorkspace management\n--------------------\n\nCreate a workspace:\n\n    conn.createWorkspace(\"myworkspace\", function(err) {\n       ...\n    });\n\nReset a workspace (create with overwrite):\n\n    conn.resetWorkspace(\"myworkspace\", function(err) {\n       ...\n    });\n\nExport a workspace:\n\n    conn.exportWorkspace(\"myworkspace\", \"/tmp/myws\", function(err) {\n       ...\n    });\n\nImport a workspace:\n\n    conn.importWorkspace(\"myworkspace2\", \"/tmp/myws\", function(err) {\n       ...\n    });\n\nRemove a workspace:\n\n    conn.removeWorkspace(\"myworkspace2\", function(err) {\n       ...\n    });\n\nSample applications\n===================\n\nThe `sample/` directory contains two samples:\n\n* `replserver.js`: a server that could be used as a more secure connectblox implementation (used now at https://repl.logicblox.com).\n* `lb_api_server.js` which is described in the next section.\n\nLB API Server\n-------------\n\nMost, if not practically all databases that I know of have some sort of authentication and authorization system. LogicBlox does not. In fact, support\nfor connecting to a LB database from another system is very limited.\n\nThe LB API server (`samples/lb_api_server.js`) exposes a LogicBlox server via a HTTP RESTful API and adds support for multiple users and authorization of users for specific workspaces, so you can create a user (as an admin) that can query a workspace, but not run 'exec' queries, or have access to other workspaces on the same server.\n\nDocumentation is limited due to time constraints, but the curl commands at the\ntop of `lb_api_server.js` should help understanding the idea.\n\nThe users and their permissions are stored in a `users` workspace which is automatically created when the server is\nfirst started (and it does not already exist). The schema\nfor this can be found under `sample/api_server_schema.logic`, as well as the initial data (for the `admin` user) in `sample/api_server_init.logic`.",
  "readmeFilename": "README.md",
  "_id": "logicblox-connectblox@0.2.1",
  "description": "node-lbc ========",
  "dist": {
    "shasum": "22b7f31a7a243a02402eddefe34366f95bb4bf14"
  },
  "_from": "nodelbc@https://bitbucket.org/mmealling/node-lbc/get/default.tar.gz"
}
